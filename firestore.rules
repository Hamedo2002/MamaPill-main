rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to get user data
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Helper function to check if user is a doctor
    function isDoctor() {
      let userData = getUserData();
      return userData != null && userData.role == 'doctor';
    }

    // Helper function to check if user is hospital staff
    function isStaff() {
      let userData = getUserData();
      return userData != null && userData.role == 'staff';
    }

    // Helper function to check if user is a patient
    function isPatient() {
      let userData = getUserData();
      return userData != null && userData.role == 'patient';
    }

    // Helper function to validate new user data
    function isValidNewUser(userData) {
      let hasRequiredFields = userData.keys().hasAll(['email', 'username', 'role']);
      let isValidRole = userData.role in ['patient', 'doctor', 'staff'];
      let hasPatientId = userData.role == 'patient' ? userData.keys().hasAll(['patientId']) : true;
      return hasRequiredFields && isValidRole && hasPatientId;
    }

    // Helper function to check if user can read medicine
    function canReadMedicine(medicineData) {
      let userData = getUserData();
      return isDoctor() || isStaff() || 
             (isPatient() && medicineData.patientId == userData.patientId);
    }
    
    // Helper function to check if user can read a patient record
    function canReadPatientRecord(recordData) {
      let userData = getUserData();
      return isDoctor() || isStaff() ||
             (isPatient() && recordData.patientId == userData.patientId);
    }

    // Rules for users collection
    match /users/{userId} {
      // Allow users to read their own data without role verification
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isValidNewUser(request.resource.data);
      allow update: if isAuthenticated() && isOwner(userId);
      
      // Allow doctors and staff to read all user data
      allow read: if isAuthenticated() && (
        isDoctor() || isStaff()
      );
    }

    // Rules for medicine collections
    match /medicine/{medicineId} {
      allow read: if isAuthenticated() && canReadMedicine(resource.data);
      allow write: if isAuthenticated() && (isDoctor() || isStaff());
    }

    match /dispenser_medicine/{medicineId} {
      allow read: if isAuthenticated() && canReadMedicine(resource.data);
      allow write: if isAuthenticated() && (isDoctor() || isStaff());
    }
    
    // Rules for patient medical records collection
    match /patient_records/{recordId} {
      allow read: if isAuthenticated() && canReadPatientRecord(resource.data);
      allow write: if isAuthenticated() && (isDoctor() || isStaff());
    }
  }
}
